Zack Raver; ravzac14
due wk 10

8.1
I think you would just need to add it to the lexer, and then make its cases in the parser

8.4(skip)
You would just add it to MulOp or ArithOp

8.7(skip)
You could do this by carrying a variable from the beginning, monitoring the line number of the program
or
You could do this in the parser after you see semicolons, braces, etc

8.8(new)
i	a	z
n	n	n
5	n	n
5	2	n
5	2	1
5	2	2
2	2	2
2	4	2
1	4	2
1	16	2
0	32	2

8.9(new)
Assignment:
	Variable: z
	Binary:
		Op: *
		Var: z
		Var: a

Assignment:
	IntIdentifier: z
	Binary:
		Int*: 	*
		IntIden:z
		IntIden:a

8.16
a) 	E = (z+2) * y
	St = {(x,2),(y,-3),(z,75)}
E is binary, op=*, term1 = x + 2, term2 = y
	term1 is binary, op = +, term 1' = x, term2' = 2
		term1' is var = x, whose meaning is 2 as per state
		term2' is value = 2, meaning is 2
	term2 is var = y, whose meaning is -3 as per state


b)	E =  2 * x + 3 / y - 4
	St = {(x,2),(y,-3),(z,75)}
E is binary, op = *, term1 = 2 (whose meaning is 2), term 2 is x + 3 / y - 4
	term2 is binary, op = /, term1' = x + 3, term2' = y - 4
		term1' is binary, op = +, term1'' = x, term2'' = 3
			term1'' is var = x, whose meaning is 2 (as per state)
			term2;; is 3, meaning is 3
		term2' is binary op = -, term1''' = y, term2''' = 4
			term1''' is var = y, whose meaning is -3 as per state
			term2''' is val = 4, meaning is 4


c) 	E = 1
	St = {""}
E is value, so M = 1


8.21
ApplyBinary(Op op, Value v1, 1)
	= v1 + 1	if op == ++
	= v1 - 1	if op == --

